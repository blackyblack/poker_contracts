/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common.js"
  
    export type ActionStruct = {channelId: BigNumberish, handId: BigNumberish, seq: BigNumberish, action: BigNumberish, amount: BigNumberish, prevHash: BytesLike, sender: AddressLike}

    export type ActionStructOutput = [channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string] & {channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string }
  

  export interface HeadsUpPokerReplayInterface extends Interface {
    getFunction(nameOrSignature: "replayGame" | "replayIncompleteGame"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'replayGame', values: [ActionStruct[], BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'replayIncompleteGame', values: [ActionStruct[], BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]): string;

    decodeFunctionResult(functionFragment: 'replayGame', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'replayIncompleteGame', data: BytesLike): Result;
  }

  

  export interface HeadsUpPokerReplay extends BaseContract {
    
    connect(runner?: ContractRunner | null): HeadsUpPokerReplay;
    waitForDeployment(): Promise<this>;

    interface: HeadsUpPokerReplayInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    replayGame: TypedContractMethod<
      [actions: ActionStruct[], stackA: BigNumberish, stackB: BigNumberish, minSmallBlind: BigNumberish, player1: AddressLike, player2: AddressLike, ],
      [[bigint, bigint, bigint] & {end: bigint, folder: bigint, calledAmount: bigint }],
      'view'
    >
    

    
    replayIncompleteGame: TypedContractMethod<
      [actions: ActionStruct[], stackA: BigNumberish, stackB: BigNumberish, minSmallBlind: BigNumberish, player1: AddressLike, player2: AddressLike, ],
      [[bigint, bigint, bigint] & {end: bigint, folder: bigint, calledAmount: bigint }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'replayGame'): TypedContractMethod<
      [actions: ActionStruct[], stackA: BigNumberish, stackB: BigNumberish, minSmallBlind: BigNumberish, player1: AddressLike, player2: AddressLike, ],
      [[bigint, bigint, bigint] & {end: bigint, folder: bigint, calledAmount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'replayIncompleteGame'): TypedContractMethod<
      [actions: ActionStruct[], stackA: BigNumberish, stackB: BigNumberish, minSmallBlind: BigNumberish, player1: AddressLike, player2: AddressLike, ],
      [[bigint, bigint, bigint] & {end: bigint, folder: bigint, calledAmount: bigint }],
      'view'
    >;

    

    filters: {
      
    };
  }