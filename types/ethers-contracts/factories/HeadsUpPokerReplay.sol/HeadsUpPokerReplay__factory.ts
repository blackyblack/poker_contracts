/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { HeadsUpPokerReplay, HeadsUpPokerReplayInterface } from "../../HeadsUpPokerReplay.sol/HeadsUpPokerReplay.js";

  const _abi = [
  {
    "inputs": [],
    "name": "BigBlindActionInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "BigBlindAmountInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "BigBlindPrevHashInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "BigBlindSequenceInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "BigBlindStackInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "BlindOnlyStart",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "CallAmountInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "CheckAmountInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "FoldAmountInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "HandNotDone",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InvalidPlayer",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "MinimumRaiseNotMet",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoBlinds",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoReopenAllowed",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "PlayerAllIn",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "PrevHashInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "RaiseAmountZero",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "RaiseInsufficientIncrease",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "RaiseLimitExceeded",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "RaiseStackInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SequenceInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SmallBlindActionInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SmallBlindAmountInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SmallBlindPrevHashInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SmallBlindSequenceInvalid",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "StreetOverflow",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "UnknownAction",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "WrongPlayerTurn",
    "type": "error"
  },
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "channelId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "handId",
            "type": "uint256"
          },
          {
            "internalType": "uint32",
            "name": "seq",
            "type": "uint32"
          },
          {
            "internalType": "uint8",
            "name": "action",
            "type": "uint8"
          },
          {
            "internalType": "uint128",
            "name": "amount",
            "type": "uint128"
          },
          {
            "internalType": "bytes32",
            "name": "prevHash",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "internalType": "struct Action[]",
        "name": "actions",
        "type": "tuple[]"
      },
      {
        "internalType": "uint256",
        "name": "stackA",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "stackB",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "minSmallBlind",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "player1",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "player2",
        "type": "address"
      }
    ],
    "name": "replayGame",
    "outputs": [
      {
        "internalType": "enum HeadsUpPokerReplay.End",
        "name": "end",
        "type": "uint8"
      },
      {
        "internalType": "uint8",
        "name": "folder",
        "type": "uint8"
      },
      {
        "internalType": "uint256",
        "name": "calledAmount",
        "type": "uint256"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "channelId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "handId",
            "type": "uint256"
          },
          {
            "internalType": "uint32",
            "name": "seq",
            "type": "uint32"
          },
          {
            "internalType": "uint8",
            "name": "action",
            "type": "uint8"
          },
          {
            "internalType": "uint128",
            "name": "amount",
            "type": "uint128"
          },
          {
            "internalType": "bytes32",
            "name": "prevHash",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "internalType": "struct Action[]",
        "name": "actions",
        "type": "tuple[]"
      },
      {
        "internalType": "uint256",
        "name": "stackA",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "stackB",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "minSmallBlind",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "player1",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "player2",
        "type": "address"
      }
    ],
    "name": "replayIncompleteGame",
    "outputs": [
      {
        "internalType": "enum HeadsUpPokerReplay.End",
        "name": "end",
        "type": "uint8"
      },
      {
        "internalType": "uint8",
        "name": "folder",
        "type": "uint8"
      },
      {
        "internalType": "uint256",
        "name": "calledAmount",
        "type": "uint256"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "";

  
      type HeadsUpPokerReplayConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: HeadsUpPokerReplayConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class HeadsUpPokerReplay__factory extends ContractFactory {
    
      constructor(...args: HeadsUpPokerReplayConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<HeadsUpPokerReplay & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): HeadsUpPokerReplay__factory {
      return super.connect(runner) as HeadsUpPokerReplay__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): HeadsUpPokerReplayInterface {
      return new Interface(_abi) as HeadsUpPokerReplayInterface;
    }
    
    override attach(address: string | Addressable): HeadsUpPokerReplay {
      return super.attach(address) as HeadsUpPokerReplay;
    }
  static connect(address: string, runner?: ContractRunner | null): HeadsUpPokerReplay {
      return new Contract(address, _abi, runner) as unknown as HeadsUpPokerReplay;
    }
  }

  
  