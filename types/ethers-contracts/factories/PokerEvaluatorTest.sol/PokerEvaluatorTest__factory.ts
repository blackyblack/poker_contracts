/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { PokerEvaluatorTest, PokerEvaluatorTestInterface } from "../../PokerEvaluatorTest.sol/PokerEvaluatorTest.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "uint8[7]",
        "name": "cards",
        "type": "uint8[7]"
      }
    ],
    "name": "evaluateHand",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080806040523461001657610951908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c6310daea3414610024575f80fd5b346100895760e03660031901126100895736602312156100895761004661008d565b8060e43660e411610089576004915b81831061006f57602061006785610140565b604051908152f35b823560ff8116810361008957815260209283019201610055565b5f80fd5b6040519060e0820182811067ffffffffffffffff8211176100ad57604052565b634e487b7160e01b5f52604160045260245ffd5b6040519060a0820182811067ffffffffffffffff8211176100ad57604052565b9060078110156100f25760051b0190565b634e487b7160e01b5f52603260045260245ffd5b60021b906103fc60fc83169216820361011b57565b634e487b7160e01b5f52601160045260245ffd5b9060058110156100f25760051b0190565b9061014961008d565b9060e036833761015761008d565b9260e03685375f5b6007811061071d57505f925f945f915b600783106106a4575050505f935f945f5b60ff6004818316101561069757600f8460059261019c85610106565b161c1610156101b05760010160ff16610180565b9495506001939150505b6101c3856107bd565b9091908480610690575b610669575b9192905f80955f965f916101e46100c1565b9660a03689375f98600e955b60028061ffff891610158061065c575b156102d95787811b6203fffc811661fffc82160361011b5761fffc168f901c600f1690600482036102495750505061ffff60ff8716965b1697881561011b57975f1901956101f0565b91979591600382036102665750505061ffff60ff8516945b610237565b959c91958103610297575060ff90808216610288575061ffff908c169b610237565b9b955061ffff90861695610237565b9b600161ffff929d14806102cc575b156102615760ff9b6102c66102ba82610787565b9d80841692168d61012f565b52610237565b50600560ff8d16106102a6565b509a995093979a91959b50935094909460ff988981166106365750858916151594858061062b575b6106055761044657505061042e57506103fe5750818316801515919082806103f3575b6103a557505061036b5750608062ff0000835160101b16620ff0006020850151600c1b161761ff00604085015160081b1617610ff0606085015160041b1617920151161790565b8291506040610ff09162ff0000620ff000621000009651600c1b169160101b161761ff00602085015160081b161792015160041b16171790565b6220000095948216109262ff00009250620ff0009161ff009185156103ec5780955b156103e45750945b5160081b1693600c1b169160101b1617171790565b9050946103cf565b81956103c7565b508482161515610324565b84935061ff0092506020915062ff0000620ff000623000009651600c1b169160101b161792015160081b16171790565b94505050505062ff0000915060101b16624000001790565b9850989550505050505060a03661045b6100c1565b3761046461008d565b9360e03686375f935f5b600781106105a4575050505f905b8261048685610798565b16821015610523575f5b8361049a86610798565b1683810390811161011b5781101561051857836104b782886100e1565b5116906001810180821161011b57600192866104d3838b6100e1565b5116116104e2575b5001610490565b610511866104f0848b6100e1565b511691876104fe828c6100e1565b511661050a858c6100e1565b52896100e1565b525f6104db565b50906001019061047c565b92505061052e6100c1565b9060a03683375f5b60058110610583575062500000929350608062ff0000835160101b16620ff0006020850151600c1b161761ff00604085015160081b1617610ff0606085015160041b161792015116171790565b8082610591600193886100e1565b511661059d828661012f565b5201610536565b600190600f806105b483876100e1565b5160041c16878516146105c9575b500161046e565b6105d382866100e1565b51168281146105fd575b866105f3816105eb8b610787565b9a168b6100e1565b911690525f6105c2565b50600e6105dd565b505050505050925050626000009250620ff00062ff000091600c1b169160101b16171790565b508989161515610301565b9850505050505050505062ff0000620ff000627000009351600c1b169160101b16171790565b50600560ff8d1610610200565b6106738685610861565b156101d25793509450505062ff0000915060101b16628000001790565b50826101cd565b50509290509392936101ba565b9091959460ff806106b589866100e1565b511696816106cf816106c78c886100e1565b511699610106565b1691600f928385821c169060019586830180931161011b57856106f993831b921b19161799610106565b16918082841c1693840180941161011b57600193831b921b1916179601919061016f565b600190600f9594958061073083866100e1565b5160041c1661073f83896100e1565b5261074a82856100e1565b511661075682876100e1565b528160ff61076483886100e1565b511614610775575b0193929361015f565b600e61078182876100e1565b5261076c565b60ff1660ff811461011b5760010190565b60ff5f199116019060ff821161011b57565b60ff6003199116019060ff821161011b57565b905f60025b60ff80821690600e82116108045785600f916107dd85610106565b161c166107f4575b506107ef90610787565b6107c2565b6001901b909117906107ef6107e5565b505050915061403c808316146108585760065b60ff600e8183161161084e57601f9061082f836107aa565b161b808416146108475761084290610787565b610817565b6001925090565b505090505f905f90565b60019150600590565b5f915f5b600781106108c25750505061403c808216146108bc5760065b60ff600e818316116108b557601f90610896836107aa565b161b808316146108ae576108a990610787565b61087e565b5050600190565b5050505f90565b50600190565b600f806108cf83866100e1565b5160041c169060ff91828516146108eb575b5050600101610865565b908295916108fb600194876100e1565b5116908391828114610913575b161b1793905f6108e1565b50600e61090856fea264697066735822122017e0dd101f73fe6a9ab60d2384eaa91984175788a534933ea86b86a05df0157164736f6c63430008180033";

  
      type PokerEvaluatorTestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: PokerEvaluatorTestConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class PokerEvaluatorTest__factory extends ContractFactory {
    
      constructor(...args: PokerEvaluatorTestConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<PokerEvaluatorTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): PokerEvaluatorTest__factory {
      return super.connect(runner) as PokerEvaluatorTest__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): PokerEvaluatorTestInterface {
      return new Interface(_abi) as PokerEvaluatorTestInterface;
    }
    
    override attach(address: string | Addressable): PokerEvaluatorTest {
      return super.attach(address) as PokerEvaluatorTest;
    }
  static connect(address: string, runner?: ContractRunner | null): PokerEvaluatorTest {
      return new Contract(address, _abi, runner) as unknown as PokerEvaluatorTest;
    }
  }

  
  