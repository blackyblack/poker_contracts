/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
    export type ActionStruct = {channelId: BigNumberish, handId: BigNumberish, seq: BigNumberish, action: BigNumberish, amount: BigNumberish, prevHash: BytesLike, sender: AddressLike}

    export type ActionStructOutput = [channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string] & {channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string }
  

export declare namespace HeadsUpPokerEIP712 {
      
    export type CardCommitStruct = {channelId: BigNumberish, handId: BigNumberish, slot: BigNumberish, commitHash: BytesLike, prevHash: BytesLike}

    export type CardCommitStructOutput = [channelId: bigint, handId: bigint, slot: bigint, commitHash: string, prevHash: string] & {channelId: bigint, handId: bigint, slot: bigint, commitHash: string, prevHash: string }
  
    }

  export interface HeadsUpPokerEIP712Interface extends Interface {
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "digestAction" | "digestCardCommit" | "eip712Domain" | "recoverActionSigner" | "recoverCommitSigner"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'digestAction', values: [ActionStruct]): string;
encodeFunctionData(functionFragment: 'digestCardCommit', values: [HeadsUpPokerEIP712.CardCommitStruct]): string;
encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;
encodeFunctionData(functionFragment: 'recoverActionSigner', values: [ActionStruct, BytesLike]): string;
encodeFunctionData(functionFragment: 'recoverCommitSigner', values: [HeadsUpPokerEIP712.CardCommitStruct, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'digestAction', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'digestCardCommit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverActionSigner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverCommitSigner', data: BytesLike): Result;
  }

  
    export namespace EIP712DomainChangedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface HeadsUpPokerEIP712 extends BaseContract {
    
    connect(runner?: ContractRunner | null): HeadsUpPokerEIP712;
    waitForDeployment(): Promise<this>;

    interface: HeadsUpPokerEIP712Interface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DOMAIN_SEPARATOR: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    digestAction: TypedContractMethod<
      [act: ActionStruct, ],
      [string],
      'view'
    >
    

    
    digestCardCommit: TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, ],
      [string],
      'view'
    >
    

    
    eip712Domain: TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >
    

    
    recoverActionSigner: TypedContractMethod<
      [act: ActionStruct, sig: BytesLike, ],
      [string],
      'view'
    >
    

    
    recoverCommitSigner: TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, sig: BytesLike, ],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DOMAIN_SEPARATOR'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'digestAction'): TypedContractMethod<
      [act: ActionStruct, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'digestCardCommit'): TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'eip712Domain'): TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'recoverActionSigner'): TypedContractMethod<
      [act: ActionStruct, sig: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'recoverCommitSigner'): TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, sig: BytesLike, ],
      [string],
      'view'
    >;

    getEvent(key: 'EIP712DomainChanged'): TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;

    filters: {
      
      'EIP712DomainChanged()': TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
      EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
    
    };
  }