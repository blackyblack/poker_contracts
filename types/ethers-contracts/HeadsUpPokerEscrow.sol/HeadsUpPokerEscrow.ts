/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
    export type ActionStruct = {channelId: BigNumberish, handId: BigNumberish, seq: BigNumberish, action: BigNumberish, amount: BigNumberish, prevHash: BytesLike, sender: AddressLike}

    export type ActionStructOutput = [channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string] & {channelId: bigint, handId: bigint, seq: bigint, action: bigint, amount: bigint, prevHash: string, sender: string }
  

export declare namespace HeadsUpPokerEIP712 {
      
    export type CardCommitStruct = {channelId: BigNumberish, handId: BigNumberish, slot: BigNumberish, commitHash: BytesLike, prevHash: BytesLike}

    export type CardCommitStructOutput = [channelId: bigint, handId: bigint, slot: bigint, commitHash: string, prevHash: string] & {channelId: bigint, handId: bigint, slot: bigint, commitHash: string, prevHash: string }
  
    }

export declare namespace HeadsUpPokerEscrow {
      
    export type ChannelStruct = {player1: AddressLike, player2: AddressLike, deposit1: BigNumberish, deposit2: BigNumberish, finalized: boolean, handId: BigNumberish, player2Joined: boolean, minSmallBlind: BigNumberish, player1Signer: AddressLike, player2Signer: AddressLike}

    export type ChannelStructOutput = [player1: string, player2: string, deposit1: bigint, deposit2: bigint, finalized: boolean, handId: bigint, player2Joined: boolean, minSmallBlind: bigint, player1Signer: string, player2Signer: string] & {player1: string, player2: string, deposit1: bigint, deposit2: bigint, finalized: boolean, handId: bigint, player2Joined: boolean, minSmallBlind: bigint, player1Signer: string, player2Signer: string }
  

    export type DisputeStateStruct = {inProgress: boolean, deadline: BigNumberish, actionCount: BigNumberish, endType: BigNumberish, folder: BigNumberish, calledAmount: BigNumberish}

    export type DisputeStateStructOutput = [inProgress: boolean, deadline: bigint, actionCount: bigint, endType: bigint, folder: bigint, calledAmount: bigint] & {inProgress: boolean, deadline: bigint, actionCount: bigint, endType: bigint, folder: bigint, calledAmount: bigint }
  

    export type ShowdownStateStruct = {deadline: BigNumberish, inProgress: boolean, cards: BigNumberish[], lockedCommitMask: BigNumberish, calledAmount: BigNumberish}

    export type ShowdownStateStructOutput = [deadline: bigint, inProgress: boolean, cards: bigint[], lockedCommitMask: bigint, calledAmount: bigint] & {deadline: bigint, inProgress: boolean, cards: bigint[], lockedCommitMask: bigint, calledAmount: bigint }
  
    }

  export interface HeadsUpPokerEscrowInterface extends Interface {
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "digestAction" | "digestCardCommit" | "dispute" | "disputeWindow" | "eip712Domain" | "finalizeDispute" | "finalizeShowdown" | "getChannel" | "getDispute" | "getHandId" | "getMinSmallBlind" | "getShowdown" | "join" | "open" | "recoverActionSigner" | "recoverCommitSigner" | "revealCards" | "revealWindow" | "settle" | "stacks" | "topUp" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ChannelJoined" | "ChannelOpened" | "ChannelTopUp" | "CommitsUpdated" | "DisputeExtended" | "DisputeFinalized" | "DisputeStarted" | "EIP712DomainChanged" | "Settled" | "ShowdownFinalized" | "ShowdownStarted" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'digestAction', values: [ActionStruct]): string;
encodeFunctionData(functionFragment: 'digestCardCommit', values: [HeadsUpPokerEIP712.CardCommitStruct]): string;
encodeFunctionData(functionFragment: 'dispute', values: [BigNumberish, ActionStruct[], BytesLike[]]): string;
encodeFunctionData(functionFragment: 'disputeWindow', values?: undefined): string;
encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;
encodeFunctionData(functionFragment: 'finalizeDispute', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'finalizeShowdown', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getChannel', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getDispute', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getHandId', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getMinSmallBlind', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getShowdown', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'join', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'open', values: [BigNumberish, AddressLike, BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'recoverActionSigner', values: [ActionStruct, BytesLike]): string;
encodeFunctionData(functionFragment: 'recoverCommitSigner', values: [HeadsUpPokerEIP712.CardCommitStruct, BytesLike]): string;
encodeFunctionData(functionFragment: 'revealCards', values: [BigNumberish, HeadsUpPokerEIP712.CardCommitStruct[], BytesLike[], BigNumberish[], BytesLike[]]): string;
encodeFunctionData(functionFragment: 'revealWindow', values?: undefined): string;
encodeFunctionData(functionFragment: 'settle', values: [BigNumberish, ActionStruct[], BytesLike[]]): string;
encodeFunctionData(functionFragment: 'stacks', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'topUp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'digestAction', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'digestCardCommit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'dispute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'disputeWindow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeDispute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeShowdown', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getChannel', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getDispute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getHandId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMinSmallBlind', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getShowdown', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverActionSigner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverCommitSigner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revealCards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revealWindow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stacks', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'topUp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace ChannelJoinedEvent {
      export type InputTuple = [channelId: BigNumberish, player: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, player: string, amount: bigint];
      export interface OutputObject {channelId: bigint, player: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ChannelOpenedEvent {
      export type InputTuple = [channelId: BigNumberish, player1: AddressLike, player2: AddressLike, amount: BigNumberish, handId: BigNumberish, minSmallBlind: BigNumberish];
      export type OutputTuple = [channelId: bigint, player1: string, player2: string, amount: bigint, handId: bigint, minSmallBlind: bigint];
      export interface OutputObject {channelId: bigint, player1: string, player2: string, amount: bigint, handId: bigint, minSmallBlind: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ChannelTopUpEvent {
      export type InputTuple = [channelId: BigNumberish, player: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, player: string, amount: bigint];
      export interface OutputObject {channelId: bigint, player: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommitsUpdatedEvent {
      export type InputTuple = [channelId: BigNumberish, newMask: BigNumberish];
      export type OutputTuple = [channelId: bigint, newMask: bigint];
      export interface OutputObject {channelId: bigint, newMask: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DisputeExtendedEvent {
      export type InputTuple = [channelId: BigNumberish, submitter: AddressLike, actionCount: BigNumberish];
      export type OutputTuple = [channelId: bigint, submitter: string, actionCount: bigint];
      export interface OutputObject {channelId: bigint, submitter: string, actionCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DisputeFinalizedEvent {
      export type InputTuple = [channelId: BigNumberish, winner: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, winner: string, amount: bigint];
      export interface OutputObject {channelId: bigint, winner: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DisputeStartedEvent {
      export type InputTuple = [channelId: BigNumberish, submitter: AddressLike, actionCount: BigNumberish];
      export type OutputTuple = [channelId: bigint, submitter: string, actionCount: bigint];
      export interface OutputObject {channelId: bigint, submitter: string, actionCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EIP712DomainChangedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SettledEvent {
      export type InputTuple = [channelId: BigNumberish, winner: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, winner: string, amount: bigint];
      export interface OutputObject {channelId: bigint, winner: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ShowdownFinalizedEvent {
      export type InputTuple = [channelId: BigNumberish, winner: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, winner: string, amount: bigint];
      export interface OutputObject {channelId: bigint, winner: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ShowdownStartedEvent {
      export type InputTuple = [channelId: BigNumberish];
      export type OutputTuple = [channelId: bigint];
      export interface OutputObject {channelId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [channelId: BigNumberish, player: AddressLike, amount: BigNumberish];
      export type OutputTuple = [channelId: bigint, player: string, amount: bigint];
      export interface OutputObject {channelId: bigint, player: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface HeadsUpPokerEscrow extends BaseContract {
    
    connect(runner?: ContractRunner | null): HeadsUpPokerEscrow;
    waitForDeployment(): Promise<this>;

    interface: HeadsUpPokerEscrowInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DOMAIN_SEPARATOR: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    digestAction: TypedContractMethod<
      [act: ActionStruct, ],
      [string],
      'view'
    >
    

    
    digestCardCommit: TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, ],
      [string],
      'view'
    >
    

    
    dispute: TypedContractMethod<
      [channelId: BigNumberish, actions: ActionStruct[], signatures: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    disputeWindow: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    eip712Domain: TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >
    

    
    finalizeDispute: TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    finalizeShowdown: TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getChannel: TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.ChannelStructOutput],
      'view'
    >
    

    
    getDispute: TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.DisputeStateStructOutput],
      'view'
    >
    

    
    getHandId: TypedContractMethod<
      [channelId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getMinSmallBlind: TypedContractMethod<
      [channelId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getShowdown: TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.ShowdownStateStructOutput],
      'view'
    >
    

    
    join: TypedContractMethod<
      [channelId: BigNumberish, player2Signer: AddressLike, ],
      [void],
      'payable'
    >
    

    
    open: TypedContractMethod<
      [channelId: BigNumberish, opponent: AddressLike, minSmallBlind: BigNumberish, player1Signer: AddressLike, ],
      [bigint],
      'payable'
    >
    

    
    recoverActionSigner: TypedContractMethod<
      [act: ActionStruct, sig: BytesLike, ],
      [string],
      'view'
    >
    

    
    recoverCommitSigner: TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, sig: BytesLike, ],
      [string],
      'view'
    >
    

    
    revealCards: TypedContractMethod<
      [channelId: BigNumberish, cardCommits: HeadsUpPokerEIP712.CardCommitStruct[], signatures: BytesLike[], cards: BigNumberish[], cardSalts: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    revealWindow: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    settle: TypedContractMethod<
      [channelId: BigNumberish, actions: ActionStruct[], signatures: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    stacks: TypedContractMethod<
      [channelId: BigNumberish, ],
      [[bigint, bigint] & {p1: bigint, p2: bigint }],
      'view'
    >
    

    
    topUp: TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    withdraw: TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DOMAIN_SEPARATOR'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'digestAction'): TypedContractMethod<
      [act: ActionStruct, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'digestCardCommit'): TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'dispute'): TypedContractMethod<
      [channelId: BigNumberish, actions: ActionStruct[], signatures: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'disputeWindow'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'eip712Domain'): TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'finalizeDispute'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'finalizeShowdown'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getChannel'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.ChannelStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getDispute'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.DisputeStateStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getHandId'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getMinSmallBlind'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getShowdown'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [HeadsUpPokerEscrow.ShowdownStateStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'join'): TypedContractMethod<
      [channelId: BigNumberish, player2Signer: AddressLike, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'open'): TypedContractMethod<
      [channelId: BigNumberish, opponent: AddressLike, minSmallBlind: BigNumberish, player1Signer: AddressLike, ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'recoverActionSigner'): TypedContractMethod<
      [act: ActionStruct, sig: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'recoverCommitSigner'): TypedContractMethod<
      [cc: HeadsUpPokerEIP712.CardCommitStruct, sig: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'revealCards'): TypedContractMethod<
      [channelId: BigNumberish, cardCommits: HeadsUpPokerEIP712.CardCommitStruct[], signatures: BytesLike[], cards: BigNumberish[], cardSalts: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revealWindow'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'settle'): TypedContractMethod<
      [channelId: BigNumberish, actions: ActionStruct[], signatures: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stacks'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [[bigint, bigint] & {p1: bigint, p2: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'topUp'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [channelId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'ChannelJoined'): TypedContractEvent<ChannelJoinedEvent.InputTuple, ChannelJoinedEvent.OutputTuple, ChannelJoinedEvent.OutputObject>;
getEvent(key: 'ChannelOpened'): TypedContractEvent<ChannelOpenedEvent.InputTuple, ChannelOpenedEvent.OutputTuple, ChannelOpenedEvent.OutputObject>;
getEvent(key: 'ChannelTopUp'): TypedContractEvent<ChannelTopUpEvent.InputTuple, ChannelTopUpEvent.OutputTuple, ChannelTopUpEvent.OutputObject>;
getEvent(key: 'CommitsUpdated'): TypedContractEvent<CommitsUpdatedEvent.InputTuple, CommitsUpdatedEvent.OutputTuple, CommitsUpdatedEvent.OutputObject>;
getEvent(key: 'DisputeExtended'): TypedContractEvent<DisputeExtendedEvent.InputTuple, DisputeExtendedEvent.OutputTuple, DisputeExtendedEvent.OutputObject>;
getEvent(key: 'DisputeFinalized'): TypedContractEvent<DisputeFinalizedEvent.InputTuple, DisputeFinalizedEvent.OutputTuple, DisputeFinalizedEvent.OutputObject>;
getEvent(key: 'DisputeStarted'): TypedContractEvent<DisputeStartedEvent.InputTuple, DisputeStartedEvent.OutputTuple, DisputeStartedEvent.OutputObject>;
getEvent(key: 'EIP712DomainChanged'): TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
getEvent(key: 'Settled'): TypedContractEvent<SettledEvent.InputTuple, SettledEvent.OutputTuple, SettledEvent.OutputObject>;
getEvent(key: 'ShowdownFinalized'): TypedContractEvent<ShowdownFinalizedEvent.InputTuple, ShowdownFinalizedEvent.OutputTuple, ShowdownFinalizedEvent.OutputObject>;
getEvent(key: 'ShowdownStarted'): TypedContractEvent<ShowdownStartedEvent.InputTuple, ShowdownStartedEvent.OutputTuple, ShowdownStartedEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'ChannelJoined(uint256,address,uint256)': TypedContractEvent<ChannelJoinedEvent.InputTuple, ChannelJoinedEvent.OutputTuple, ChannelJoinedEvent.OutputObject>;
      ChannelJoined: TypedContractEvent<ChannelJoinedEvent.InputTuple, ChannelJoinedEvent.OutputTuple, ChannelJoinedEvent.OutputObject>;
    

      'ChannelOpened(uint256,address,address,uint256,uint256,uint256)': TypedContractEvent<ChannelOpenedEvent.InputTuple, ChannelOpenedEvent.OutputTuple, ChannelOpenedEvent.OutputObject>;
      ChannelOpened: TypedContractEvent<ChannelOpenedEvent.InputTuple, ChannelOpenedEvent.OutputTuple, ChannelOpenedEvent.OutputObject>;
    

      'ChannelTopUp(uint256,address,uint256)': TypedContractEvent<ChannelTopUpEvent.InputTuple, ChannelTopUpEvent.OutputTuple, ChannelTopUpEvent.OutputObject>;
      ChannelTopUp: TypedContractEvent<ChannelTopUpEvent.InputTuple, ChannelTopUpEvent.OutputTuple, ChannelTopUpEvent.OutputObject>;
    

      'CommitsUpdated(uint256,uint16)': TypedContractEvent<CommitsUpdatedEvent.InputTuple, CommitsUpdatedEvent.OutputTuple, CommitsUpdatedEvent.OutputObject>;
      CommitsUpdated: TypedContractEvent<CommitsUpdatedEvent.InputTuple, CommitsUpdatedEvent.OutputTuple, CommitsUpdatedEvent.OutputObject>;
    

      'DisputeExtended(uint256,address,uint256)': TypedContractEvent<DisputeExtendedEvent.InputTuple, DisputeExtendedEvent.OutputTuple, DisputeExtendedEvent.OutputObject>;
      DisputeExtended: TypedContractEvent<DisputeExtendedEvent.InputTuple, DisputeExtendedEvent.OutputTuple, DisputeExtendedEvent.OutputObject>;
    

      'DisputeFinalized(uint256,address,uint256)': TypedContractEvent<DisputeFinalizedEvent.InputTuple, DisputeFinalizedEvent.OutputTuple, DisputeFinalizedEvent.OutputObject>;
      DisputeFinalized: TypedContractEvent<DisputeFinalizedEvent.InputTuple, DisputeFinalizedEvent.OutputTuple, DisputeFinalizedEvent.OutputObject>;
    

      'DisputeStarted(uint256,address,uint256)': TypedContractEvent<DisputeStartedEvent.InputTuple, DisputeStartedEvent.OutputTuple, DisputeStartedEvent.OutputObject>;
      DisputeStarted: TypedContractEvent<DisputeStartedEvent.InputTuple, DisputeStartedEvent.OutputTuple, DisputeStartedEvent.OutputObject>;
    

      'EIP712DomainChanged()': TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
      EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
    

      'Settled(uint256,address,uint256)': TypedContractEvent<SettledEvent.InputTuple, SettledEvent.OutputTuple, SettledEvent.OutputObject>;
      Settled: TypedContractEvent<SettledEvent.InputTuple, SettledEvent.OutputTuple, SettledEvent.OutputObject>;
    

      'ShowdownFinalized(uint256,address,uint256)': TypedContractEvent<ShowdownFinalizedEvent.InputTuple, ShowdownFinalizedEvent.OutputTuple, ShowdownFinalizedEvent.OutputObject>;
      ShowdownFinalized: TypedContractEvent<ShowdownFinalizedEvent.InputTuple, ShowdownFinalizedEvent.OutputTuple, ShowdownFinalizedEvent.OutputObject>;
    

      'ShowdownStarted(uint256)': TypedContractEvent<ShowdownStartedEvent.InputTuple, ShowdownStartedEvent.OutputTuple, ShowdownStartedEvent.OutputObject>;
      ShowdownStarted: TypedContractEvent<ShowdownStartedEvent.InputTuple, ShowdownStartedEvent.OutputTuple, ShowdownStartedEvent.OutputObject>;
    

      'Withdrawn(uint256,address,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }