/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface HeadsUpPokerEscrowInterface extends Interface {
  getFunction(nameOrSignature: "open" | "join" | "channels"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ChannelOpened"): EventFragment;

  encodeFunctionData(
    functionFragment: "open",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "channels",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "channels", data: BytesLike): Result;
}

export namespace ChannelOpenedEvent {
  export type InputTuple = [
    channelId: BigNumberish,
    player1: AddressLike,
    player2: AddressLike,
    stake: BigNumberish
  ];
  export type OutputTuple = [
    channelId: bigint,
    player1: string,
    player2: string,
    stake: bigint
  ];
  export interface OutputObject {
    channelId: bigint;
    player1: string;
    player2: string;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HeadsUpPokerEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): HeadsUpPokerEscrow;
  waitForDeployment(): Promise<this>;

  interface: HeadsUpPokerEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  open: TypedContractMethod<
    [
      channelId: BigNumberish,
      player2: AddressLike,
      minSmallBlind: BigNumberish,
      replayContract: AddressLike
    ],
    [void],
    "payable"
  >;

  join: TypedContractMethod<[channelId: BigNumberish], [void], "payable">;

  channels: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player1: string;
        player2: string;
        stake: bigint;
        minSmallBlind: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<
    [
      channelId: BigNumberish,
      player2: AddressLike,
      minSmallBlind: BigNumberish,
      replayContract: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[channelId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "channels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player1: string;
        player2: string;
        stake: bigint;
        minSmallBlind: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ChannelOpened"
  ): TypedContractEvent<
    ChannelOpenedEvent.InputTuple,
    ChannelOpenedEvent.OutputTuple,
    ChannelOpenedEvent.OutputObject
  >;

  filters: {
    "ChannelOpened(uint256,address,address,uint256)": TypedContractEvent<
      ChannelOpenedEvent.InputTuple,
      ChannelOpenedEvent.OutputTuple,
      ChannelOpenedEvent.OutputObject
    >;
    ChannelOpened: TypedContractEvent<
      ChannelOpenedEvent.InputTuple,
      ChannelOpenedEvent.OutputTuple,
      ChannelOpenedEvent.OutputObject
    >;
  };
}
