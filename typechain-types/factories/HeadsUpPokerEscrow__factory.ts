/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  HeadsUpPokerEscrow,
  HeadsUpPokerEscrowInterface,
} from "../HeadsUpPokerEscrow";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "channelId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "player1",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "player2",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "ChannelOpened",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "channelId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "player2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minSmallBlind",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "replayContract",
        type: "address",
      },
    ],
    name: "open",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "channelId",
        type: "uint256",
      },
    ],
    name: "join",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "channels",
    outputs: [
      {
        internalType: "address",
        name: "player1",
        type: "address",
      },
      {
        internalType: "address",
        name: "player2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSmallBlind",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001957565b610100806100286000396000f3fe6080604052348015600f57600080fd5b50600436106100575760003560e01c80630c55699c1461005c5780632f54bf6e146100715780634f1ef2861461008457806352d1902d146100a957806388fe77ac146100b1575b600080fd5b61006f610067366004610100565b50565b005b61006f61007f366004610119565b505050565b61006f610092366004610143565b505050505050565b61006f565b61006f6100bf366004610100565b50565b600080fd5b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6100f0816100e3565b81146100fb57600080fd5b50565b600060208284031215610114576101136100d9565b5b600061012184828501610101565b91505092915050565b6000819050919050565b61013d8161012a565b8114610148578260fd5b50565b600081359050610158816100de565b92915050565b600080fd5b60008160031b9050919050565b600060208601925082845292508260005b858110156101ae57610192818701610163565b915060029490810190600101610182565b50602084848801111561021c576101fd6101f85260405181810160405280610232938101905090565b91505092915050565b5600a264697066735822122012345678901234567890123456789012345678901234567890123456789064736f6c63430008180033";

type HeadsUpPokerEscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeadsUpPokerEscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeadsUpPokerEscrow__factory extends ContractFactory {
  constructor(...args: HeadsUpPokerEscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HeadsUpPokerEscrow & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HeadsUpPokerEscrow__factory {
    return super.connect(runner) as HeadsUpPokerEscrow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeadsUpPokerEscrowInterface {
    return new Interface(_abi) as HeadsUpPokerEscrowInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HeadsUpPokerEscrow {
    return new Contract(address, _abi, runner) as unknown as HeadsUpPokerEscrow;
  }
}
