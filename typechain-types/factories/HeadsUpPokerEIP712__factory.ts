/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  HeadsUpPokerEIP712,
  HeadsUpPokerEIP712Interface,
} from "../HeadsUpPokerEIP712";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "channelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "handId",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "seq",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
        ],
        internalType: "struct Action",
        name: "act",
        type: "tuple",
      },
    ],
    name: "digestAction",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "channelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "handId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "slot",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "commitHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
        ],
        internalType: "struct HeadsUpPokerEIP712.CardCommit",
        name: "cc",
        type: "tuple",
      },
    ],
    name: "digestCardCommit",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "channelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "handId",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "seq",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
        ],
        internalType: "struct Action",
        name: "act",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "recoverActionSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "channelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "handId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "slot",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "commitHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
        ],
        internalType: "struct HeadsUpPokerEIP712.CardCommit",
        name: "cc",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "recoverCommitSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806040016040528060088152602001676865616473557050614f6b657260c01b815250604051806040016040528060018152602001603160f81b8152506040518060a001604052806043815260200161018c60439139600080516020610159833981519152600080516020610179833981519152600080516020610139833981519152600080516020610149833981519152848460016000600050908051906020019061009e929190610126565b5081600160006101000a81548163ffffffff021916908363ffffffff1602179055506100d78260016100e660201b60201c565b50505050505050506101bb565b60008060008087805190602001206101548288888860405160200161010d93929190610186565b6040516020818303038152906040528051906020012086866101b3565b828001600101855582156101245791602001919060010190826100ff565b5b506101319291506101bb565b509056fe";

type HeadsUpPokerEIP712ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeadsUpPokerEIP712ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeadsUpPokerEIP712__factory extends ContractFactory {
  constructor(...args: HeadsUpPokerEIP712ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HeadsUpPokerEIP712 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HeadsUpPokerEIP712__factory {
    return super.connect(runner) as HeadsUpPokerEIP712__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeadsUpPokerEIP712Interface {
    return new Interface(_abi) as HeadsUpPokerEIP712Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HeadsUpPokerEIP712 {
    return new Contract(address, _abi, runner) as unknown as HeadsUpPokerEIP712;
  }
}
